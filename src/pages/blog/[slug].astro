---
export const prerender = true;
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import CommentPost from '../../components/CommentPost.astro';
import CommentReply from '../../components/CommentReply.astro';
import CommentSection from '../../components/CommentSection.astro';
import Footer from '../../components/Footer.astro';
import PostImage from '../../components/PostImage.astro';
import { API, API_PUBLIC, PAGESIZE, SITE_TITLE } from '../../config';
import { marked } from '../../../node_modules/marked';
import DOMPurify from 'isomorphic-dompurify';
import hljs from 'highlight.js';
import 'highlight.js/styles/github-dark.css';
export async function getStaticPaths() {
	async function getTotalPages() {
		let url: string = API + '/api/posts/?fields[0]=slug&pagination[pageSize]=1';
		let fetchPages = await fetch(url);
		let pages = await fetchPages.json();
		return pages.meta.pagination.pageCount;
	}
	async function getSlugs(page: number) {
		let slugs: string[] = [];
		let url: string = `${API}/api/posts/?fields[0]=slug&pagination[pageSize]=${PAGESIZE}&pagination[page]=${page}`;
		let makeRequest = await fetch(url);
		let responseJson = await makeRequest.json();
		responseJson.data.forEach((post) => {
			slugs.push(post.attributes.slug);
		});
		return { slugs: slugs };
	}
	let TotalPages: number = await getTotalPages();
	let paginationDone: boolean = TotalPages != 0 ? false : true;
	let pageNumber: number = 1;
	let allSlugs: object[] = [];
	while (!paginationDone) {
		let response = await getSlugs(pageNumber);
		if (!response) {
			break;
		}
		response.slugs.forEach((slug) => {
			allSlugs.push({ params: { slug } });
		});
		pageNumber == TotalPages ? (paginationDone = true) : (paginationDone = false);
		pageNumber = pageNumber + 1;
	}
	return allSlugs;
}
const { slug } = Astro.params;
let posts = await fetch(API + '/api/posts/?filters[slug][$eq]=' + slug + '&fields[0]=heading&fields[1]=publishedAt&fields[2]=slug&fields[3]=updatedAt&fields[4]=content&fields[5]=description&populate[cover][fields][0]=formats&populate[cover][fields]=url&populate[cover][fields]=width&populate[cover][fields]=height').then((res) => res.json());
if (!posts.data[0]) {
	return Astro.redirect('/404');
}
const post = posts.data[0].attributes;

marked.setOptions({
	renderer: new marked.Renderer(),
	highlight: function (code, lang) {
		// Syntax highlighting
		const language = hljs.getLanguage(lang) ? lang : 'plaintext';
		return hljs.highlight(code, { language }).value;
	},
	langPrefix: 'hljs language-',
	smartypants: true
});

DOMPurify.addHook('afterSanitizeAttributes', function (node) {
	// set all elements owning target to target=_blank
	// Stolen from https://github.com/cure53/DOMPurify/issues/317#issuecomment-698800327
	if ('target' in node) {
		node.setAttribute('target', '_blank');
		node.setAttribute('rel', 'noopener');
	}
});

const content = DOMPurify.sanitize(marked.parse(post.content));
---

<!DOCTYPE html>
<html lang="en">
	<BaseHead title={`${post.heading} | ${SITE_TITLE}`} description={post.description} image={API_PUBLIC + post.cover.data.attributes.formats['thumbnail'].url} />
	<link rel="preload" as="image" href={API_PUBLIC + post.cover.data.attributes.url} />
	<script src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" async defer></script>
	<link rel="dns-prefetch" href="https://avatars.dicebear.com/" />
	<body data-post_id={posts.data[0].id} class="min-h-screen grid grid-rows-[auto,1fr,auto]">
		<!-- Inject post id here so its known on client side  -->
		<Header />
		<main aria-label="Main" class="place-self-center">
			<section aria-label="Post Image & Publish Date" class="px-6 md:px-0 w-full md:w-[45rem] lg:w-[55rem]">
				<div class="pb-6">
					<PostImage imageObject={post.cover.data.attributes} classes={'rounded-md w-full h-full object-cover aspect-video border-2 border-rose-800 flex place-items-center justify-center'} size={'original'} alt={'Heading Image'} />
				</div>
				<div>
					<p><time id="publishedAt" data-publishedat={post.publishedAt}>Published on: {post.publishedAt}</time></p>
					<p><time id="updatedAt" data-updatedat={post.updatedAt}>Last updated on: {post.updatedAt}</time></p>
				</div>
			</section>
			<section aria-label="Main Article" class="mt-14 px-6 md:px-0 w-full md:w-[45rem] lg:w-[55rem]">
				<article class="mt-5 prose prose-md md:prose-xl prose-invert max-w-full" set:html={content} />
			</section>
		</main>
		<section aria-label="Comments" class="place-self-center grid place-items-center">
			<CommentPost />
			<CommentReply />
			<CommentSection />
		</section>
		<Footer />
		<script is:inline>
			// Fix post timestamps
			let updatedAtElement = document.querySelector('#updatedAt');
			let updatedAt = updatedAtElement.dataset.updatedat;
			let publishedAtElement = document.querySelector('#publishedAt');
			let publishedAt = publishedAtElement.dataset.publishedat;
			const options = {
				dateStyle: 'short',
				timeStyle: 'short'
			};

			publishedAtElement.innerHTML = 'Published on: ' + new Date(publishedAt).toLocaleString('en-US', options);
			updatedAtElement.innerHTML = 'Last updated on: ' + new Date(updatedAt).toLocaleString('en-US', options);
		</script>
	</body>
</html>
