---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import CommentPost from '../../components/CommentPost.astro';
import CommentSection from '../../components/CommentSection.astro';
import Footer from '../../components/Footer.astro';
import PostImage from '../../components/PostImage.astro';
import { API } from '../../config';
const { slug } = Astro.params;
import { marked } from '../../../node_modules/marked';
import DOMPurify from 'isomorphic-dompurify';
import hljs from 'highlight.js/lib/common';
import 'highlight.js/styles/github-dark.css';
let posts = await fetch(API + '/api/posts/?filters[slug][$eq]=' + slug + '&fields[0]=heading&fields[1]=publishedAt&fields[2]=slug&fields[3]=updatedAt&fields[4]=content&fields[5]=description&populate[cover][fields][0]=formats&populate[cover][fields]=url&populate[cover][fields]=width&populate[cover][fields]=height').then((res) => res.json());
if (!posts.data[0]) {
	return Astro.redirect('/404');
}
const post = posts.data[0].attributes;

marked.setOptions({
	renderer: new marked.Renderer(),
	highlight: function (code, lang) {
		// Syntax highlighting
		const language = hljs.getLanguage(lang) ? lang : 'plaintext';
		return hljs.highlight(code, { language }).value;
	},
	langPrefix: 'hljs language-',
	smartypants: true
});

DOMPurify.addHook('afterSanitizeAttributes', function (node) {
	// set all elements owning target to target=_blank
	// Stolen from https://github.com/cure53/DOMPurify/issues/317#issuecomment-698800327
	if ('target' in node) {
		node.setAttribute('target', '_blank');
		node.setAttribute('rel', 'noopener');
	}
});

const content = DOMPurify.sanitize(marked.parse(post.content));
---

<!DOCTYPE html>
<html lang="en">
	<BaseHead title={post.heading} description={post.description} image={post.cover.data.attributes.formats['thumbnail'].url} />
	<link rel="preload" as="image" href={post.cover.data.attributes.url} />
	<body data-post_id={posts.data[0].id}>
		<!-- Inject post id here so its known on client side  -->
		<div class="min-h-screen grid grid-rows-[auto,1fr,auto]">
			<Header />
			<main class="place-self-center">
				<section class="px-6 md:px-0 w-full md:w-[45rem] lg:w-[55rem]">
					<div class="pb-6">
						<PostImage imageObject={post.cover.data.attributes} classes={'rounded-md w-full h-full object-cover aspect-video border-2 border-rose-800 flex place-items-center justify-center'} size={'original'} alt={'Heading Image'} />
					</div>
					<div>
						<p><time id="publishedAt" data-publishedat={post.publishedAt}>Published on: {post.publishedAt}</time></p>
						<p><time id="updatedAt" data-updatedat={post.updatedAt}>Last updated on: {post.updatedAt}</time></p>
					</div>
				</section>
				<section class="mt-14 px-6 md:px-0 w-full md:w-[45rem] lg:w-[55rem]">
					<article class="mt-5 prose prose-md md:prose-xl prose-invert max-w-fit" set:html={content} />
				</section>
			</main>
			<CommentPost />
			<CommentSection />
			<Footer />
		</div>
		<script>
			// Fix post timestamps
			let updatedAtElement: HTMLElement = document.querySelector('#updatedAt');
			let updatedAt = updatedAtElement.dataset.updatedat;
			let publishedAtElement: HTMLElement = document.querySelector('#publishedAt');
			let publishedAt = publishedAtElement.dataset.publishedat;

			publishedAtElement.innerHTML = 'Published on: ' + getFormattedUTCTime(publishedAt);
			updatedAtElement.innerHTML = 'Last updated on: ' + getFormattedUTCTime(updatedAt);

			function getFormattedUTCTime(time) {
				const options: Intl.DateTimeFormatOptions = {
					dateStyle: 'short',
					timeStyle: 'short'
				};
				return new Date(time).toLocaleString('en-US', options);
			}
		</script>
	</body>
</html>
