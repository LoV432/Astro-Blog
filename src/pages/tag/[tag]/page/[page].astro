---
export const prerender = true;
import BaseHead from '../../../../components/BaseHead.astro';
import MainPageBody from '../../../../components/MainPageBody.astro';
import Header from '../../../../components/Header.astro';
import Footer from '../../../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION, API, PAGESIZE } from '../../../../config';
import Pagination from '../../../../components/Pagination.astro';
import Search from '../../../../components/Search.astro';
import PostCards from '../../../../components/PostCards.astro';

export async function getStaticPaths() {
	async function getAllTags() {
		async function getTotalPages() {
			let url: string = `${API}/api/tags?fields[0]=tag&pagination[pageSize]=1`;
			let fetchPages = await fetch(url);
			let pages = await fetchPages.json();
			return pages.meta.pagination.pageCount;
		}
		async function getTags(page: number) {
			let Tags: string[] = [];
			let url: string = `${API}/api/tags?fields[0]=tag&pagination[pageSize]=${PAGESIZE}&pagination[page]=${page}`;
			let makeRequest = await fetch(url);
			let responseJson = await makeRequest.json();
			responseJson.data.forEach((post) => {
				Tags.push(post.attributes.tag);
			});
			return { Tags: Tags };
		}
		let TotalPages: number = await getTotalPages();
		let paginationDone: boolean = TotalPages != 0 ? false : true;
		let pageNumber: number = 1;
		let allTags: string[] = [];
		while (!paginationDone) {
			let response = await getTags(pageNumber);
			if (!response) {
				break;
			}
			response.Tags.forEach((tag) => {
				allTags.push(tag);
			});
			pageNumber == TotalPages ? (paginationDone = true) : (paginationDone = false);
			pageNumber = pageNumber + 1;
		}
		return allTags;
	}
	async function getTotalPagesOfTag(tag: string) {
		let url: string = `${API}/api/posts?filters[tags][tag][$eq]=${tag}&fields[0]=slug&pagination[pageSize]=${PAGESIZE}`;
		let fetchPages = await fetch(url);
		let pages = await fetchPages.json();
		return pages.meta.pagination.pageCount;
	}

	const allTags = await getAllTags();
	let response: object[] = [];
	for (let i = 0; i < allTags.length; i++) {
		for (let ii = 1; ii <= (await getTotalPagesOfTag(allTags[i])); ii++) {
			response.push({ params: { tag: allTags[i], page: ii } });
		}
	}

	return response;
}
const { page, tag } = Astro.params;
var api = API + '/api/posts?filters[tags][tag][$eq]=' + tag + '&fields[0]=heading&fields[1]=createdAt&fields[2]=slug&fields[3]=description&populate[tags][fields]=tag&populate[cover][fields][0]=formats&populate[cover][fields]=url&pagination[pageSize]=' + PAGESIZE + '&pagination[page]=' + page;

const posts = await fetch(api).then((res) => res.json());
const totalPages = posts.meta.pagination.pageCount;
const currentPage = posts.meta.pagination.page;
---

<!DOCTYPE html>
<html lang="en">
	<BaseHead title={`Page ${page} | ${tag[0].toUpperCase() + tag.slice(1)} | ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
	<MainPageBody>
		<Header />
		<main>
			<Search placeholder={'Search #' + tag} tag={tag} />
			<PostCards posts={posts} />
			<Pagination totalPages={totalPages} currentPage={currentPage} path={'/tag/' + tag} />
		</main>
		<Footer />
	</MainPageBody>
</html>
