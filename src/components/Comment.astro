---
const { comment } = Astro.props;
---

<div class="rounded pb-5 first:pt-5 grid grid-cols-[auto] md:grid-cols-[auto,1fr] gap-5">
	<article class="p-6 mb-6 text-base rounded-md border border-rose-800 bg-zinc-900">
		<footer class="flex justify-between items-center mb-2">
			<div class="flex items-center">
				<p aria-label="Commenter Image and Name" class="inline-flex items-center mr-3 text-sm text-gray-900 dark:text-white">
					<img class="mr-2 w-6 h-6 rounded-full" loading="lazy" src={'https://avatars.dicebear.com/api/open-peeps/' + Math.random() * 99999999 + '.svg?background=%23ffffff'} alt={comment.author.name} />{comment.author.name}
				</p>
				<p class="text-sm text-gray-600 dark:text-gray-400">
					<time class="commentPostTime" data-commentposttime={comment.createdAt}>
						{comment.createdAt}
					</time>
				</p>
			</div>
			<button class="inline-flex items-center p-2 pt-[0.55rem] pl-4 dropdown dropdown-end">
				<svg xmlns="http://www.w3.org/2000/svg" class="fill-red-700 w-2" viewBox="0 0 448 512"
					><!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. -->
					<path d="M64 32C64 14.3 49.7 0 32 0S0 14.3 0 32V64 368 480c0 17.7 14.3 32 32 32s32-14.3 32-32V352l64.3-16.1c41.1-10.3 84.6-5.5 122.5 13.4c44.2 22.1 95.5 24.8 141.7 7.4l34.7-13c12.5-4.7 20.8-16.6 20.8-30V66.1c0-23-24.2-38-44.8-27.7l-9.6 4.8c-46.3 23.2-100.8 23.2-147.1 0c-35.1-17.6-75.4-22-113.5-12.5L64 48V32z"></path>
				</svg>
				<span class="sr-only">Report Comment</span>
				<ul tabindex="0" class="dropdown-content menu p-2 shadow border border-rose-600 bg-zinc-900 rounded-box w-36">
					<li>
						<label class="w-28 p-0 place-self-center justify-center text-center active:bg-transparent">
							<input type="checkbox" data-commentid={comment.id} class="hidden cancelReport" />
							<span class="text-green-600 font-extrabold active:bg-green-900 focus:bg-green-900 w-28 py-3 px-4 rounded-md">CANCEL</span>
						</label>
					</li>
					<li>
						<label class="w-28 p-0 place-self-center justify-center text-center active:bg-transparent">
							<input data-commentid={comment.id} class="hidden" />
							<span data-commentid={comment.id} class="text-red-600 font-extrabold active:bg-red-900 w-28 py-3 px-4 rounded-md reportButton">REPORT?</span>
						</label>
					</li>
				</ul>
			</button>
		</footer>
		<pre aria-label="Comment Content" class="whitespace-pre-wrap">{comment.content}</pre>
	</article>
</div>

<script>
	document.querySelectorAll('.reportButton').forEach((button: HTMLElement) => {
		button.addEventListener('click', async () => {
			setTimeout(() => {
				if (document.activeElement instanceof HTMLElement) {
					document.activeElement.blur();
				}
			}, 100); // close dropdown
			const cloudflareToken = await cloudflareChallenge();
			// Dont go any forward in case it failed
			if (cloudflareToken == 'undefined') {
				return 0;
			}

			const commentID = button.dataset.commentid;
			const postID = document.querySelector('body').dataset.post_id;
			const options = {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: '{"postID":"' + postID + '","commentID":"' + commentID + '","cloudflaretoken":"' + cloudflareToken + '"}'
			};
			window.fetch('/blog/report', options);
		});
	});

	document.querySelectorAll('.cancelReport').forEach((button: HTMLElement) => {
		button.addEventListener('click', () => {
			setTimeout(() => {
				if (document.activeElement instanceof HTMLElement) {
					document.activeElement.blur();
				}
			}, 100); // close dropdown
		});
	});

	async function cloudflareChallenge(): Promise<string> {
		const sitekey = document.querySelector<HTMLElement>('#cf-turnstile').dataset.cloudflare_public_key;
		return new Promise((resolve) => {
			//@ts-ignore
			turnstile.render('#cf-turnstile', {
				sitekey: sitekey,
				retry: 'never',
				'refresh-expired': 'never',
				callback: function (token: string) {
					resolve(token);
				},
				'timeout-callback': function () {
					resolve('undefined');
				},
				'expired-callback': function () {
					resolve('undefined');
				},
				'error-callback': function () {
					resolve('undefined');
				}
			});
		});
	}
</script>
