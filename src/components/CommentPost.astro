---
import { CLOUDFLARE_PUBLIC_KEY } from '../config';
---

<section class="place-self-center mt-20 py-6 w-[90%] md:w-[45rem] lg:w-[55rem] border-y-2 border-rose-800 rounded" aria-label="Post Comment Section">
	<div class="collapse collapse-plus rounded-box">
		<input aria-label="Show/Hide Post Comment Section" type="checkbox" />
		<div class="collapse-title text-xl font-medium">Write a comment</div>
		<div role="form" class="collapse-content">
			<div class="form-control">
				<label class="label">
					<span class="label-text">Your Name</span>
				</label>
				<label class="input-group">
					<span class="w-20 justify-center">Name</span>
					<input id="commenter-name" type="text" placeholder="Chloe Walker" class="input input-bordered" />
				</label>

				<label class="label">
					<span class="label-text">Your Email</span>
				</label>
				<label class="input-group">
					<span class="w-20 justify-center">Email</span>
					<input id="commenter-email" type="text" placeholder="info@site.com" class="input input-bordered" />
				</label>

				<label class="label">
					<span class="label-text">Your Comment</span>
				</label>
				<label class="input-group">
					<textarea style="border-radius: 0.75rem !important;" id="commenter-comment" class="textarea textarea-bordered h-44 w-full text-xl" placeholder="What's on your mind?"></textarea>
				</label>
				<div>
					<div id="cf-turnstile" data-cloudflare_public_key={CLOUDFLARE_PUBLIC_KEY}></div>
					<button id="postComment" class="btn btn-outline btn-square disabled:text-base disabled:font-bold disabled:bg-zinc-800 disabled:hover:bg-zinc-800 border-rose-800 hover:border-rose-800 hover:bg-rose-900 text-rose-700 hover:text-white mt-6 w-32">SEND</button>
					<p id="fieldsRequired" style="opacity: 0;" class="mt-5 sm:inline-block sm:ml-5">All Fields Are Required!</p>
				</div>
			</div>
		</div>
	</div>
</section>
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" async defer></script>
<script>
	const postButton: HTMLButtonElement = document.querySelector('#postComment');
	const nameElement: HTMLInputElement = document.querySelector('#commenter-name');
	const emailElement: HTMLInputElement = document.querySelector('#commenter-email');
	const commentElement: HTMLInputElement = document.querySelector('#commenter-comment');
	const fieldsRequired: HTMLInputElement = document.querySelector('#fieldsRequired');

	document.querySelector('#postComment').addEventListener('click', async () => {
		const id = document.querySelector('body').dataset.post_id;
		const name = nameElement.value.replace(/["]/g, '\\$&').replace(/\n/g, '\\n'); // Escape all "" and spaces
		const email = emailElement.value.replace(/["]/g, '\\$&').replace(/\n/g, '\\n'); // Escape all "" and spaces
		const comment = commentElement.value.replace(/["]/g, '\\$&').replace(/\n/g, '\\n'); // Escape all "" and spaces

		// Check if any field empty and show error message if true
		if (name === '' || email === '' || comment === '') {
			fieldsRequired.style.opacity = '100';
			postButton.innerText = ascii[Math.floor(Math.random() * ascii.length)];
			return 0;
		}
		fieldsRequired.style.opacity = '0'; // Remove the empty field error message in case its showing
		postButton.innerText = '';
		postButton.classList.add('loading');

		const cloudflareToken = await cloudflareChallenge(); // Start Cloudflare Challenge
		// Dont go any forward in case it failed
		if (cloudflareToken == 'undefined') {
			postButton.classList.remove('loading');
			bot();
			setTimeout(() => {
				postButton.innerText = 'SEND';
				postButton.disabled = false;
			}, 10000);
			return 0;
		}

		const status = await sendRequest(id, name, email, comment, cloudflareToken);
		postButton.classList.remove('loading');
		switch (status) {
			case 200:
				success();
				break;

			case 401:
				bot();
				break;

			default:
				failed();
				break;
		}
		setTimeout(() => {
			postButton.innerText = 'SEND';
			postButton.disabled = false;
		}, 10000);
	});

	async function cloudflareChallenge(): Promise<string> {
		const sitekey = document.querySelector<HTMLElement>('#cf-turnstile').dataset.cloudflare_public_key;
		return new Promise((resolve) => {
			//@ts-ignore
			turnstile.render('#cf-turnstile', {
				sitekey: sitekey,
				retry: 'never',
				'refresh-expired': 'never',
				callback: function (token: string) {
					resolve(token);
				},
				'timeout-callback': function () {
					resolve('undefined');
				},
				'expired-callback': function () {
					resolve('undefined');
				},
				'error-callback': function () {
					resolve('undefined');
				}
			});
		});
	}

	function success() {
		[nameElement.value, emailElement.value, commentElement.value] = ['', '', '']; // Clear all text fields
		postButton.classList.remove('disabled:text-rose-800', 'disabled:hover:text-rose-800');
		postButton.classList.add('disabled:text-green-800', 'disabled:hover:text-green-800');
		postButton.innerText = 'Posted!';
		postButton.disabled = true;
	}

	function failed() {
		postButton.classList.remove('disabled:text-green-800', 'disabled:hover:text-green-800');
		postButton.classList.add('shake-little', 'shake-constant', 'disabled:text-rose-800', 'disabled:hover:text-rose-800');
		postButton.innerText = 'Failed!';
		postButton.disabled = true;
		setTimeout(() => {
			postButton.classList.remove('shake-little', 'shake-constant');
		}, 400);
	}

	function bot() {
		postButton.classList.add('shake-little', 'shake-constant');
		postButton.innerHTML =
			'<svg class="w-8 fill-rose-800" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M320 0c17.7 0 32 14.3 32 32V96H480c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H160c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64H288V32c0-17.7 14.3-32 32-32zM208 384c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H208zm96 0c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H304zm96 0c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H400zM264 256c0-22.1-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40s40-17.9 40-40zm152 40c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40zM48 224H64V416H48c-26.5 0-48-21.5-48-48V272c0-26.5 21.5-48 48-48zm544 0c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H576V224h16z"/></svg>';
		postButton.disabled = true;
		setTimeout(() => {
			postButton.classList.remove('shake-little', 'shake-constant');
		}, 400);
	}

	async function sendRequest(id: string, name: string, email: string, comment: string, cloudflareToken: string): Promise<number> {
		const options = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: '{"post_id":"' + id + '","name":"' + name + '","email":"' + email + '","comment":"' + comment + '","cloudflaretoken":"' + cloudflareToken + '"}'
		};
		try {
			const response = await window.fetch('/blog/comment', options);
			const status = response.status;
			return status;
		} catch {
			return 400;
		}
	}
	const ascii = ['‡´Æ‚∏ù‚∏ù> Ã´ <‚∏ù‚∏ù ·Éê', '(,,>Ôπè<,,)', '(>·éë<‡πë)/‚ô°', '(„Å§‚âßÔπè‚â¶)', '‡´Æ‚ÇçÀ∂ ‚Ä¢. ‚Ä¢ ‚ëÖ‚Çé·Éê ‚ô°', '‡´Æ( ‡πë·µî ·µï ·µî‡πë )·Éê', '‚âßÔπè‚â¶', '(‚úøÀµ‚Ä¢ÃÅ·¥ó‚Ä¢ÃÄÀµ)', '(Íàç‚ó°Íàçüå∏)', '(‚Ä¢‚ó°‚Ä¢üå∏)‚ô°'];
</script>
