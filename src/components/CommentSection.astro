<section class="mt-14 w-[92%] rounded border-y-2 border-rose-800 py-6 md:w-[45rem] lg:w-[55rem]" aria-label="Comments">
	<div class="collapse-plus rounded-box collapse">
		<input aria-label="Show/Hide All Comments" type="checkbox" />
		<div id="commentCount" class="collapse-title text-xl font-medium">Comments (0)</div>
		<div id="commentsContainer" class="collapse-content"></div>
	</div>
</section>

<script>
	import { cloudflareChallenge } from '../lib/comment-helper';
	updateComments();
	const postButton: HTMLButtonElement = document.querySelector('#postComment');
	const sendReplyButton: HTMLButtonElement = document.querySelector('#replyToComment');
	postButton.addEventListener(
		'updateComments',
		(e) => {
			updateComments();
		},
		false
	);
	sendReplyButton.addEventListener(
		'updateComments',
		(e) => {
			setTimeout(() => {
				resetReply();
			}, 10000);
			updateComments();
		},
		false
	);

	// ALL FUNCTIONS
	async function updateComments() {
		document.querySelector<HTMLElement>('#commentsContainer').innerHTML = await getComments();
		let totalComments = document.querySelector<HTMLElement>('#comments').dataset.total_comments;
		document.querySelector<HTMLElement>('#commentCount').innerText = `Comments (${totalComments})`;

		// Fix all comments timestamps
		let allCommentTimes = document.querySelectorAll('.commentPostTime');
		allCommentTimes.forEach((commentPostTimeElement: HTMLElement) => {
			let commentPostTime = commentPostTimeElement.dataset.commentposttime;
			commentPostTimeElement.innerHTML = getFormattedUTCTime(commentPostTime);
		});
		addEventListeners();
	}

	async function getComments() {
		let getComments = await window.fetch('/blog/comments/' + document.querySelector('body').dataset.post_id);
		let getCommentsHTML = new DOMParser().parseFromString(await getComments.text(), 'text/html');
		return getCommentsHTML.body.innerHTML;
	}

	async function addEventListeners() {
		// Add report button EventListeners
		document.querySelectorAll('.reportButton').forEach((button: HTMLElement) => {
			button.addEventListener('click', async () => {
				closeDropDown();
				const cloudflareToken = await cloudflareChallenge();
				// Dont go any forward in case it failed
				if (cloudflareToken == 'undefined') {
					return 0;
				}

				const commentID = button.dataset.commentid;
				const postID = document.querySelector('body').dataset.post_id;
				const options = {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: '{"postID":"' + postID + '","commentID":"' + commentID + '","cloudflaretoken":"' + cloudflareToken + '"}'
				};
				window.fetch('/blog/report', options);
			});
		});

		// Add reply button EventListeners
		const allReplyButtons = document.querySelectorAll('.reply-to-comment');
		allReplyButtons.forEach((button: HTMLElement) => {
			button.addEventListener('click', () => {
				resetReply();
				const authorName = button.dataset.threadauthor;
				const threadID = button.dataset.threadid;
				document.querySelector<HTMLElement>('#originalCommenterName').innerText = authorName;
				document.querySelector<HTMLElement>('#replyToComment').dataset.threadid = threadID;
				document.querySelector<HTMLFormElement>('#replyCommentSection').classList.remove('hidden');
				document.querySelector<HTMLFormElement>('#replyCommentSection').scrollIntoView();
				document.querySelector<HTMLFormElement>('#reply-commenter-name').focus();
			});
		});

		// Add cancel reply button EventListeners
		const cancelReplyButton = document.querySelector('#cancelReplyToComment');
		cancelReplyButton.addEventListener('click', () => {
			resetReply();
		});

		// Add cancel report button EventListeners
		document.querySelectorAll('.cancelReport').forEach((button: HTMLElement) => {
			button.addEventListener('click', () => {
				closeDropDown();
			});
		});
	}

	function closeDropDown() {
		setTimeout(() => {
			if (document.activeElement instanceof HTMLElement) {
				document.activeElement.blur();
			}
		}, 100);
	}

	function getFormattedUTCTime(time) {
		const options: Intl.DateTimeFormatOptions = {
			dateStyle: 'short',
			timeStyle: 'short'
		};
		return new Date(time).toLocaleString('en-US', options);
	}

	function resetReply() {
		document.querySelector<HTMLFormElement>('#replyCommentSection').classList.add('hidden');
		document.querySelector<HTMLFormElement>('#replyToComment').innerText = 'SEND';
		document.querySelector<HTMLFormElement>('#reply-fieldsRequired').style.opacity = '0';
	}
</script>
